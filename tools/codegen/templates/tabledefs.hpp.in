/**
 *  Copyright (c) 2014-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under both the Apache 2.0 license (found in the
 *  LICENSE file in the root directory of this source tree) and the GPLv2 (found
 *  in the COPYING file in the root directory of this source tree).
 *  You may select, at your option, one of the above-listed licenses.
 */

/*
** This file is generated. Do not modify it manually!
*/

#include <glog/logging.h>
#include <osquery/tables.h>

namespace osquery {

namespace tables {
extern const TableDefinition tbl_{{table_name}}_def;

#if defined(DECLARE_TABLE_IMPLEMENTATION) || defined(DECLARE_TABLE_DEF) || defined(DECLARE_TABLE_FOREIGN_STUB)

const TableDefinition tbl_{{table_name}}_def = { "{{table_name}}",
  {
    {% for alias in aliases %}"{{alias}}",{% endfor %}\
  },
  {
    {% for column in schema %}\
      std::make_tuple("{{column.name}}", {{column.type.affinity}},\
    {% if column.options|length > 0 %} {{column.options_set}}\
    {% else %} ColumnOptions::DEFAULT\
    {% endif %}\
    ),
    {% endfor %}\
  },
  {
    {% for column in schema %}\
    {% if column.aliases|length > 0 %}\
      {"{{column.name}}", {% raw %}{{% endraw %}\
      {% for alias in column.aliases %}"{{alias}}"\
      {% if not loop.last %}, {% endif %}\
      {% endfor %}}},
    {% endif %}\
    {% endfor %}\
  },
  {% for attribute in attribute_set %}\
        TableAttributes::{{attribute}} |\
  {% endfor %}\
        TableAttributes::NONE
};


#endif // defined(DECLARE_TABLE_IMPLEMENTATION) || defined(DECLARE_TABLE_DEF)

} // namespace tables

#if defined(DECLARE_TABLE_IMPLEMENTATION) || defined(DECLARE_TABLE_FOREIGN_STUB)

void tbl_{{table_name}}_register_stub()
{
  bool isInternalUtilitiesTable =\
  {% if attributes.utility %} true {% else %} false {% endif %};
  auto registry = RegistryFactory::get().registry("table");
  TableCache *cache = new TableCacheDisabled("{{table_name}}");
  registry->add("{{table_name}}", std::make_shared<TablePlugin>(tables::tbl_{{table_name}}_def, *cache), isInternalUtilitiesTable);
}
{% if table_name != filename %}\
void tbl_{{filename}}_register_stub() { tbl_{{table_name}}_register_stub(); } // filename differs from table name
{% endif %}\

#endif // defined(DECLARE_TABLE_IMPLEMENTATION) || defined(DECLARE_TABLE_FOREIGN_STUB)

#if defined(DECLARE_TABLE_IMPLEMENTATION)

// forward declaration of funcs
namespace tables {
{% if class_name == "" %}\
{% if generator %}\
void {{function}}(RowYield& yield, QueryContext& context);
{% else %}\
osquery::QueryData {{function}}(QueryContext& context);
{% endif %}\
{% else %}
class {{class_name}} {
 public:
  void {{function}}(RowYield& yield, QueryContext& context);
};
{% endif %}\
}

class {{table_name_cc}}TablePlugin : public TablePlugin {
public:
 {{table_name_cc}}TablePlugin(const TableDefinition& tdef, TableCache &tcache) : TablePlugin(tdef, tcache) { }

 private:
{% if generator %}\
  bool usesGenerator() const override { return true; }

  void generator(RowYield& yield, QueryContext& context) override {
{% if class_name != "" %}\
    if (EventFactory::exists(getName())) {
      auto subscriber = EventFactory::getEventSubscriber(getName());
      return subscriber->{{function}}(yield, context);
    } else {
      LOG(ERROR) << "Subscriber table missing: " << getName();
    }
{% else %}\
    tables::{{function}}(yield, context);
{% endif %}\
  }
{% else %}\
  QueryData generate(QueryContext& context) override {
    auto results = tables::{{function}}(context);
    return results;
  }
{% endif %}\

};

void tbl_{{table_name}}_register()
{
  bool isInternalUtilitiesTable =\
  {% if attributes.utility %} true {% else %} false {% endif %};
  auto registry = RegistryFactory::get().registry("table");

{% if attributes.cacheable %}\
  extern TableCache* TableCacheDBNew(std::string tableName);
  TableCache *cache=TableCacheDBNew("{{table_name}}");
{% else %}\
  TableCache *cache=new TableCacheDisabled("{{table_name}}");
{% endif %}\
  registry->add("{{table_name}}", std::make_shared<{{table_name_cc}}TablePlugin>(tables::tbl_{{table_name}}_def, *cache), isInternalUtilitiesTable);
}
{% if table_name != filename %}\
void tbl_{{filename}}_register() { tbl_{{table_name}}_register(); } // filename differs from table name
{% endif %}\
#endif // defined(DECLARE_TABLE_IMPLEMENTATION)

extern void tbl_{{table_name}}_register();
{% if table_name != filename %}\
extern void tbl_{{filename}}_register();
{% endif %}\

} // namespace osquery

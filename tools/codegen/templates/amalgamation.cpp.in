/**
 *  Copyright (c) 2014-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under both the Apache 2.0 license (found in the
 *  LICENSE file in the root directory of this source tree) and the GPLv2 (found
 *  in the COPYING file in the root directory of this source tree).
 *  You may select, at your option, one of the above-listed licenses.
 */

/*
** This file is generated. Do not modify it manually!
*/

#include <osquery/events.h>
#include <osquery/logger.h>
#include <osquery/tables.h>

{% if foreign %}
{% for table in tables %}
#define DECLARE_TABLE_FOREIGN_STUB_{{table.name}}
#include <generated/tables/tbl_{{table.name}}_defs.hpp>
{% endfor %}
{% endif %}

namespace osquery {

{% if foreign %}
  void registerForeignTables() {
  auto registry = RegistryFactory::get().registry("table");
  {% for table in tables %}
  extern TablePlugin* tbl_{{table.name}}_stub_new();
  {
    auto ptr = tbl_{{table.name}}_stub_new();
    registry->add(ptr->definition().name, std::shared_ptr<TablePlugin>(ptr), false);
  }
  {% endfor %}
  }
{% else %}
  void RegisterLinkedTables{{category}}() {
    auto registry = RegistryFactory::get().registry("table");
{% for table in tables %}
{% if table.is_blacklisted %}
    // table {{table.name}} is blacklisted
{% else %}
  extern TablePlugin* tbl_{{table.name}}_plugin_new();
  {
    auto ptr = tbl_{{table.name}}_plugin_new();
    registry->add(ptr->definition().name, std::shared_ptr<TablePlugin>(ptr), {% if category == "utils" %}true{% else %}false{% endif %});
  }
{% endif %}
{% endfor %}
  }
  /*
  class CRegisterLinkedTables{{category}} {
  public:
    CRegisterLinkedTables{{category}}() {
      RegisterLinkedTables{{category}}();
    }
  };
  static const auto doAutoReg = CRegisterLinkedTables{{category}}();
  */
{% endif %}

} // namespace

#!/bin/sh
#
# osqueryd 	Start/Stop the osquery daemon.
#
# chkconfig: 3345 90 60
# Description:
#             With osquery, you can use SQL to query low-level
#             operating system information. Under the hood, instead
#             of querying static tables, these queries dynamically execute
#             high-performance native code. The results of the
#             SQL query are transparently returned to you quickly and easily
#
### BEGIN INIT INFO
# Provides: osquery osqueryd
# Required-Start: $local_fs $syslog
# Required-Stop: $local_fs $syslog
# Default-Start:  3345
# Default-Stop: 90
# Short-Description: run osqueryd daemon
# Description:
#             With osquery, you can use SQL to query low-level
#             operating system information. Under the hood, instead
#             of querying static tables, these queries dynamically execute
#             high-performance native code. The results of the
#             SQL query are transparently returned to you quickly and easily
#
#
### END INIT INFO

if [ -z $RETVAL ]; then RETVAL=0; fi
if [ -z $PROG ]; then PROG="osqueryd"; fi
if [ -z $EXEC ]; then EXEC=/usr/bin/osqueryd; fi
if [ -z $REAL_CONFIG_PATH ]; then REAL_CONFIG_PATH=/etc/osquery/osquery.conf; fi
if [ -z $LOCKFILE ]; then LOCKFILE=/var/lock/subsys/osqueryd; fi
if [ -z $PIDFILE ]; then PIDFILE=/var/run/osquery.pid; fi

[ $UID -eq 0 ] && [ -e /etc/sysconfig/$PROG ] && . /etc/sysconfig/$PROG

. /etc/init.d/functions

if [ ! -e $REAL_CONFIG_PATH ] ; then
    echo "No osquery config file found at $REAL_CONFIG_PATH."
    echo "See '/usr/share/osquery/osquery.example.conf' for an example config."
    exit 4
fi

start() {
    if [ $UID -ne 0 ] ; then
        echo "User has insufficient privilege."
        exit 4
    elif [ -f $PIDFILE ]; then
        PID=$(cat $PIDFILE)
        echo "$PROG is already running: $PID"
        exit 4
    else
        daemon $PROG --config_path=$REAL_CONFIG_PATH \
                     --pidfile=$PIDFILE \
                     --daemonize=true
               retval=$?
               echo
               [ $RETVAL -eq 0 ] && touch $LOCKFILE || failure
    fi
}

stop() {
    if [ $UID -ne 0 ] ; then
        echo "User has insufficient privilege."
        exit 4
    elif [ ! -s $PIDFILE ] ; then
        echo $"Stopping $PROG: "
        failure $"Stopping $PROG"
    else
        echo -n $"Stopping $PROG: "
        killproc $PROG
        retval=$?
        echo
        [ $RETVAL -eq 0 ] && rm -f $LOCKFILE
        rm -f $PIDFILE
    fi
}

restart() {
    stop
    start
}

status() {
    status -p $PIDFILE $PROG
}

case "$1" in
    start)
        $1
        ;;
    stop)
        $1
        ;;
    restart)
        $1
        ;;
    status)
        $1
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart}"
        exit 2
esac
exit $?

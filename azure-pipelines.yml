trigger:
- master

jobs:

# LINUX

  - job: LinuxRelease

    pool:
      vmImage: 'Ubuntu-16.04'

    container:
      image: trailofbits/osql-experimental:ubuntu-18.04
      options: --privileged

    steps:
    - script: mkdir $(Build.BinariesDirectory)/build
      displayName: "Create build folder"

    - task: CMake@1
      displayName: "Configure osquery"
      inputs:
        workingDirectory: $(Build.BinariesDirectory)/build
        cmakeArgs:
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DBUILD_TESTING=ON
          $(Build.SourcesDirectory)

    - task: CMake@1
      displayName: "Check code formatting"
      inputs:
        workingDirectory: $(Build.BinariesDirectory)/build
        cmakeArgs: --build . --target format_check

    - task: CMake@1
      displayName: "Build osquery"
      inputs:
        workingDirectory: $(Build.BinariesDirectory)/build
        cmakeArgs: --build . -j 3

    - script: |
        ctest --build-nocmake -V
      displayName: "Run tests"
      workingDirectory: $(Build.BinariesDirectory)/build

    - script: |
        echo "##vso[task.setvariable variable=Status;isOutput=true]1"
      name: JobResult


  - job: LinuxDebug

    pool:
      vmImage: 'Ubuntu-16.04'

    container: trailofbits/osql-experimental:ubuntu-18.04

    steps:
    - script: mkdir $(Build.BinariesDirectory)/build
      displayName: "Create build folder"

    - task: CMake@1
      displayName: "Configure osquery"
      inputs:
        workingDirectory: $(Build.BinariesDirectory)/build
        cmakeArgs:
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DBUILD_TESTING=ON
          -DOSQUERY_NO_DEBUG_SYMBOLS=ON
          $(Build.SourcesDirectory)

    - task: CMake@1
      displayName: "Build osquery"
      inputs:
        workingDirectory: $(Build.BinariesDirectory)/build
        cmakeArgs: --build . -j 3

    - script: |
        ctest --build-nocmake -V
      displayName: "Run tests"
      workingDirectory: $(Build.BinariesDirectory)/build

    - script: |
        echo "##vso[task.setvariable variable=Status;isOutput=true]1"
      name: JobResult


  - job: Linux

    pool:
      vmImage: 'Ubuntu-16.04'

    condition: succeededOrFailed()

    dependsOn:
      - LinuxRelease
      - LinuxDebug

    variables:
      LinuxReleaseStatus: $[ dependencies.LinuxRelease.outputs['JobResult.Status'] ]
      LinuxDebugStatus: $[ dependencies.LinuxDebug.outputs['JobResult.Status'] ]

    steps:
    - checkout: none

    - script: |
        if [ -z "$(LinuxReleaseStatus)" ] || [ -z "$(LinuxDebugStatus)" ]; then
          exit 1
        fi
      displayName: "Detect Linux Release and Debug build status"

# LINUX

# MACOS

  - job: macOSRelease

    pool:
      vmImage: macos-10.14

    steps:
    - script: |
        brew upgrade
        brew install ccache
      displayName: "Install Homebrew and prerequisites"
      timeoutInMinutes: 20

    - script: mkdir $(Build.BinariesDirectory)/build
      displayName: "Create build folder"

    - task: CMake@1
      displayName: "Configure osquery"
      inputs:
        workingDirectory: $(Build.BinariesDirectory)/build
        cmakeArgs: -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON $(Build.SourcesDirectory)

    - task: CMake@1
      displayName: "Build osquery"
      inputs:
        workingDirectory: $(Build.BinariesDirectory)/build
        cmakeArgs: --build . -j 3

    - script: |
        ctest --build-nocmake -V
      displayName: "Run tests"
      workingDirectory: $(Build.BinariesDirectory)/build

    - script: |
        echo "##vso[task.setvariable variable=Status;isOutput=true]1"
      name: JobResult


  - job: macOSDebug

    pool:
      vmImage: macos-10.14

    steps:
    - script: |
        brew upgrade
        brew install ccache
      displayName: "Install Homebrew and prerequisites"
      timeoutInMinutes: 20

    - script: mkdir $(Build.BinariesDirectory)/build
      displayName: "Create build folder"

    - task: CMake@1
      displayName: "Configure osquery"
      inputs:
        workingDirectory: $(Build.BinariesDirectory)/build
        cmakeArgs: -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DOSQUERY_NO_DEBUG_SYMBOLS=ON $(Build.SourcesDirectory)

    - task: CMake@1
      displayName: "Build osquery"
      inputs:
        workingDirectory: $(Build.BinariesDirectory)/build
        cmakeArgs: --build . -j 3

    - script: |
        ctest --build-nocmake -V
      displayName: "Run tests"
      workingDirectory: $(Build.BinariesDirectory)/build

    - script: |
        echo "##vso[task.setvariable variable=Status;isOutput=true]1"
      name: JobResult


  - job: macOS

    pool:
      vmImage: 'Ubuntu-16.04'

    condition: succeededOrFailed()

    dependsOn:
      - macOSRelease
      - macOSDebug

    variables:
      macOSReleaseStatus: $[ dependencies.macOSRelease.outputs['JobResult.Status'] ]
      macOSDebugStatus: $[ dependencies.macOSDebug.outputs['JobResult.Status'] ]

    steps:
    - checkout: none

    - script: |
        if [ -z "$(macOSReleaseStatus)" ] || [ -z "$(macOSDebugStatus)" ]; then
          exit 1
        fi
      displayName: "Detect macOS Release and Debug build status"

# MACOS

# WINDOWS

  - job: Windows

    pool:
      vmImage: vs2017-win2016

    steps:
    - powershell: |
        git config --global core.autocrlf false

    - checkout: self

    - powershell: |
        mkdir $(Build.BinariesDirectory)\build
      displayName: "Create build folder"

    - task: CMake@1
      displayName: "Configure osquery"
      inputs:
        workingDirectory: $(Build.BinariesDirectory)\build
        cmakeArgs: -G "Visual Studio 15 2017 Win64" -T host=x64 -DBUILD_TESTING=ON $(Build.SourcesDirectory)

    - task: CMake@1
      displayName: "Build osquery"
      inputs:
        workingDirectory: $(Build.BinariesDirectory)\build
        cmakeArgs: --build . -j 3 --config Release

    - powershell: |
        ctest --build-nocmake -C Release -V
      displayName: "Run tests"
      workingDirectory: $(Build.BinariesDirectory)/build

# WINDOWS
